// B635076 김승연
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>
#include <time.h>
#include <pwd.h>
#include <grp.h>

/* 각  파일마다의  정보들(파일 이름, 파일 permissions, 시간,  링크 수, 소유자, 소유 그룹 등등)을 저장하기 위한 구조체이다. */
struct file_info {
        char *filename;
        char permission[11];
        struct stat f_stat;
};

/* 각 파일 정보를 출력하기 위한 함수이다.
 * 구조체 file_info를 매개변수르 받는다.
 * file_info 안에서도 파일들의 정보를 담고 있는 구조체인 struct stat f_stat 에서 파일의 세부 정보를 가지고 온다.
 * 참고로 struct tm* time에서 tm_year는 1900년도 이후로 측정되기 때문에 1900을 더해주어야 한다고 한다. tm_mon도 +1을 해주어야 한다고 한다.  */
void print_file_info(struct file_info f) {
        struct tm *time = localtime(&f.f_stat.st_mtime); // localtime 함수는 time_t값을 struct tm 구조체 형식으로 변환해준다.

        printf("%s ", f.permission);
        printf("%2ld ", f.f_stat.st_nlink); // 링크 수 출력하는데 2칸 사용하도록 함
        printf("%s %s ",getpwuid(f.f_stat.st_uid)->pw_name, getgrgid(f.f_stat.st_gid)->gr_name);
        printf("%7ld ", f.f_stat.st_size); // 파일 사이즈를 출력하는데 7칸 사용하도록 함
        printf("%d-%02d-%02d %02d:%02d ",(time->tm_year)+1900, (time->tm_mon)+1, time->tm_mday, time->tm_hour, time->tm_min);
        printf("%s\n", f.filename);
}

/* 배열에 저장한 file_info들을 이름순으로 정렬하기 위해 사용되는 함수이다.
 * 정렬 방식으로는 선택정렬을 사용하였다.
 * strcmp() 함수를 이용하여 어느 이름이 앞에 가야할 지를 결정한다. */
void sort(struct file_info a[], int size) {
        int i, j, least;
        struct file_info temp;
        for(i = 0; i < size-1; i++) {
                least = i;
                for (j = i+1; j < size; j++) {
                        if (strcmp(a[j].filename, a[least].filename) < 0)
                                least = j;
                }
                temp = a[i];
                a[i] = a[least];
                a[least] = temp;
        }
}

/* ls -lR 명령을 수행하기 위한 함수이다.
 * 매개변수로 두개의 char형 변수를 받는다. path는 처음 프로그램을 시작할 때부터 지금까지의 경로이고, dirname은 이제 탐색할 디렉토리의 이름이다. */
void lslR(char *path, char *dirname) {
        struct stat buf;
        struct dirent *entry;
        DIR *dir = NULL;
        char *dirName[200]; // 이후에 이동해야 할 하위 디렉토리들의 이름을 저장할 변수이다.
        int sum = 0; // 사용된 블록 수의 총합을 저장하기 위한 변수이다.
        int countDir = 0; // 현재 디렉토리에 있는 하위 디렉토리 개수
        int countFile = 0; // 현재 디렉토리에 있는 파일 개수
        int i, j;
        char nextpath[200] = {'\0'}; // 경로를 저장하기 위한 변수이다.
        int arrSize = 3; // file_info를 저장할 배열의 초기 사이즈이다.
        struct file_info *f_info = (struct file_info *)malloc(sizeof(struct file_info)*arrSize); // 동적할당을 이용해서 배열을 생성한다.

        // 디렉토리를 오픈한다.
        dir = opendir(dirname);
        if(!dir) {
                printf("%s 디렉토리 열기 실패\n", path);
                return;
        }

        // 해당 디렉토리로 이동한다.
        chdir(dirname);

        // 디렉토리 안의 파일들을 모두 읽는다.
        while ((entry = readdir(dir)) != NULL) {
                if (lstat(entry->d_name, &buf) == -1) {
                        printf("파일정보를 읽어오지 못함\n");
                        continue;
                }
                // lstat으로 파일 정보를 읽어오는 것을 성공한 경우 아래 코드들을 수행한다.
                if (S_ISDIR(buf.st_mode) == 1) {
                        if (!strcmp(entry->d_name, ".") || !strcmp(entry->d_name, "..")) // ".", ".." 이름의 디렉토리는 file_info로 저장해두지 않는다.
                                continue;
                }
                sum += buf.st_blocks; // 사용된 블록 크기를 sum에 저장한다.
                if (countFile == arrSize) { // 기존 file_info를 저장해놓는 배열의 크기가 꽉 찬 경우, 크기를 두배 늘려준다.
                        arrSize *= 2;
                        f_info = realloc(f_info, sizeof(struct file_info)*arrSize);
                }
                // 파일 정보를 f_info 배열에 저장해둔다.
                f_info[countFile].filename = entry->d_name;
                f_info[countFile].f_stat = buf;
                strcpy(f_info[countFile].permission, "----------"); // 퍼미션 정보를 초기화한다. 아래부분에서 퍼미션 정보를 기록할 예정.
                countFile++;
        }
        printf("%s:\n", path);
        printf("합계 %d\n", sum / 2);

        // 이름순으로 정렬하자
        sort(f_info, countFile);

        for (i = 0; i < countFile; i++) {

                if (S_ISDIR(f_info[i].f_stat.st_mode)) { // 디렉토리이면,
                        f_info[i].permission[0] = 'd';
                        dirName[countDir] = f_info[i].filename;
                        countDir++;
                }
                else if (S_ISREG(f_info[i].f_stat.st_mode)) // 일반 파일이면,
                         f_info[i].permission[0] = '-';
                else if (S_ISLNK(f_info[i].f_stat.st_mode)) // 심볼릭 링크이면,
                         f_info[i].permission[0] = 'l';
                for (j = 0; j < 3; j++) {
                        /* S_IRUSR의 값은 0000400, S_IRGRP의 값은 0000040, S_IROTH의 값은 0000004이다.
                         * 그래서 비트 연산자를 사용하면 쉽게 다른 플래그 값을 계산할 수 있다.
                         * 이는 write, execute 플래그에서도 마찬가지이다. */
                        if (f_info[i].f_stat.st_mode & (S_IRUSR >> j*3))
                                f_info[i].permission[j*3+1] = 'r';
                        if (f_info[i].f_stat.st_mode & (S_IWUSR >> j*3))
                                f_info[i].permission[j*3+2] = 'w';
                        if (f_info[i].f_stat.st_mode & (S_IXUSR >> j*3))
                                f_info[i].permission[j*3+3] = 'x';
                }
                print_file_info(f_info[i]);
        }
        printf("\n");

        //lslR함수를 호출하여 차례대로 하위 디렉토리를 탐색한다.
        for (i = 0; i < countDir; i++) {
                memset(nextpath, '\0', sizeof(nextpath)); // nextpath 값을 초기화함
                // 경로를 nextpath에 저장한다.
                strcat(nextpath, path);
                strcat(nextpath, "/");
                strcat(nextpath, dirName[i]);

                lslR(nextpath, dirName[i]);
        }

        closedir(dir); // 디렉토리를 닫는다.
        chdir(".."); // 이전 디렉토리로 이동한다.
        free(f_info); // 동적할당한 것을 해제한다.
}


int main() {
        lslR(".", ".");

        return 0;
}
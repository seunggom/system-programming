gcc -o a main.o funcs.o

#include <stdio.h>
#include <stdlib.h>
#include "funcs.h"


int main(int argc, char *argv[])
{
        int n,i;
    if (argc < 2) {
                printf("Usage : %s number\n",argv[0]);
                exit(1);
        }

        n = atoi(argv[1]);
        for(i=0;i < n; i++) {
                funcReplaced();
        }

        endFunc();
        printf("funcReplaced is called %d times\nendFunc is called %d times\n",
                countReplaceFunc,countEndFunc);
    return(0);
}


[B635076@linux2 sphw1]$ cat myfunc.c
// B635076 ±è½Â¿¬
#include <stdio.h>

void __real_funcReplaced();
void __real_endFunc();

void __wrap_funcReplaced() {
        __real_funcReplaced();
        printf("In wrap_funcReplaced\n");
}

void __wrap_endFunc() {
        __real_endFunc();
        printf("In wrap_endFunc\n");
}


[B635076@linux2 sphw1]$ cat mydynamicfunc.c
// B635076 ±è½Â¿¬
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>

void funcReplaced() {
        void (*replacedP)();
        void *error;

        replacedP = dlsym(RTLD_NEXT, "funcReplaced");
        if((error = dlerror()) != NULL) {
                fputs(error, stderr);
                exit(1);
        }

        replacedP();
        printf("In wrap_funcReplaced\n");
}

void endFunc() {
        void (*endP)();
        void *error;

        endP = dlsym(RTLD_NEXT, "endFunc");
        if((error = dlerror()) != NULL) {
                fputs(error, stderr);
                exit(1);
        }

        endP();
        printf("In wrap_endFunc\n");
}

